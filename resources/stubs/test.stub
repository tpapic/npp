<?php

namespace DummyNamespace;

use App\DummySingular;
use App\TestCase;

class DummyClass extends TestCase
{

    /** @test */
    public function should_get_paginated_DummyPlural()
    {
        $this->login();
        $structure = [
            'DummyPlural' => ['total', 'data'],
            'success'
        ];

        $this->jsonAuth('GET', '/api/DummyPlural')
            ->assertJsonStructure($structure)
            ->assertJsonFragment(['success' => true]);
    }

    /** @test */
    public function should_not_get_paginated_DummyPlural_when_not_logged_in()
    {
        $this->json('GET', '/api/DummyPlural')
            ->assertJsonFragment([
                'success' => false,
                'reason' => 'not_logged_in'
            ]);
    }

    /** @test */
    public function should_create_DummySingular_with_all_data()
    {
        $this->login();
        $DummySingular = factory(DummyUppercaseSingular::class)->make()->toArray();
        $this->jsonAuth('POST', '/api/DummyPlural', $DummySingular)
            ->assertJsonFragment(['success' => true]);

        $this->assertDatabaseHas('DummyPlural', $DummySingular);
    }

    /** @test */
    public function should_not_create_DummySingular_when_not_logged_in()
    {
        $DummySingular = factory(DummyUppercaseSingular::class)->make()->getAttributes();
        $this->json('POST', '/api/DummyPlural', $DummySingular)
            ->assertJsonFragment([
                'success' => false,
                'reason' => 'not_logged_in'
            ]);

        $this->assertDatabaseMissing('DummyPlural', $DummySingular);
    }

    /** @test */
    public function should_get_DummySingular_with_id()
    {
        $this->login();
        $DummySingular = factory(DummyUppercaseSingular::class)->create()->getAttributes();
        $url = '/api/DummyPlural/' . $DummySingular['id'];
        $structure = ['success', 'DummySingular'];
        $this->jsonAuth('GET', $url)
            ->assertJsonStructure($structure)
            ->assertJsonFragment(['success' => true]);
    }

    /** @test */
    public function should_not_get_DummySingular_when_not_logged_in()
    {
        $DummySingular = factory(DummyUppercaseSingular::class)->create()->getAttributes();
        $url = '/api/DummyPlural/' . $DummySingular['id'];
        $this->json('GET', $url)
            ->assertJsonFragment([
                'success' => false,
                'reason' => 'not_logged_in'
            ]);
    }

    /** @test */
    public function should_update_DummySingular()
    {
        $this->login();

        $DummySingular = factory(DummyUppercaseSingular::class)->create();
        $id = $DummySingular->id;

        $newDummyUppercaseSingular = factory(DummyUppercaseSingular::class)->make()->getAttributes();

        $url = '/api/DummyPlural/' . $id;
        $this->jsonAuth('PUT', $url, $newDummyUppercaseSingular)
            ->assertJsonFragment(['success' => true]);

        $this->assertDatabaseHas('DummyPlural', $newDummyUppercaseSingular);

    }

    /** @test */
    public function should_not_update_DummySingular_when_not_logged_in()
    {
        $DummySingular = factory(DummyUppercaseSingular::class)->create();
        $id = $DummySingular->id;

        $newDummyUppercaseSingular = factory(DummyUppercaseSingular::class)->make()->getAttributes();

        $url = '/api/DummyPlural/' . $id;
        $this->json('PUT', $url, $newDummyUppercaseSingular)
            ->assertJsonFragment([
                'success' => false,
                'reason' => 'not_logged_in'
            ]);

        $this->assertDatabaseMissing('DummyPlural', $newDummyUppercaseSingular);
    }

    /** @test */
    public function should_delete_DummySingular()
    {
        $this->login();
        $DummySingular = factory(DummyUppercaseSingular::class)->create()->getAttributes();
        $url = '/api/DummyPlural/' . $DummySingular['id'];

        $this->jsonAuth('DELETE', $url)
            ->assertJsonFragment(['success' => true]);

        $this->assertDatabaseMissing('DummyPlural', $DummySingular);
    }

    /** @test */
    public function should_not_delete_DummySingular_when_not_logged_in()
    {
        $DummySingular = factory(DummyUppercaseSingular::class)->create()->getAttributes();
        $url = '/api/DummyPlural/' . $DummySingular['id'];
        $this->json('DELETE', $url)
            ->assertJsonFragment([
                'success' => false,
                'reason' => 'not_logged_in'
            ]);

    }
}
